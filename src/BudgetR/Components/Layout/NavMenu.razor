@inject NavigationManager NavigationManager

<MudNavMenu>
    <AuthorizeView>
        <Authorized>
            <MudNavLink Href="/" Match="NavLinkMatch.All">Dashboard</MudNavLink>
            <MudNavLink Href="/accounts" Match="NavLinkMatch.Prefix">Accounts</MudNavLink>
            <MudNavGroup Title="Budget" Expanded="true">
                <MudNavLink Href="/budgets" Match="NavLinkMatch.Prefix">Budgets</MudNavLink>
                <MudNavLink Href="/incomes" Match="NavLinkMatch.Prefix">Incomes</MudNavLink>
                <MudNavLink Href="/expenses" Match="NavLinkMatch.Prefix">Expenses</MudNavLink>
            </MudNavGroup>
            <MudNavLink>
                <NavLink href="Account/Manage">
                    @* @context.User.Identity?.Name *@
                    Manage Account
                </NavLink>
            </MudNavLink>
            <MudNavLink>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit">
                        Logout
                    </button>
                </form>
            </MudNavLink>
        </Authorized>
    </AuthorizeView>
</MudNavMenu>


@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}